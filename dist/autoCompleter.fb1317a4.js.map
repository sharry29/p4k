{"version":3,"sources":["scripts/autoCompleter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"autoCompleter.fb1317a4.js","sourceRoot":"../src","sourcesContent":["// import * as d3 from 'd3'\n// import autoComplete from 'autocomplete'\n\n// document\n// \t.querySelector('#autoComplete')\n// \t.addEventListener('autoComplete', function(event) {\n// \t\tconsole.log(event.detail)\n// \t\t// console.log(autoCompletejs);\n// \t})\n\n// const acjs = autoComplete({\n// \tdata: {\n// \t\tsrc: function() {\n// \t\t\tconsole.log('hello')\n// \t\t},\n// \t\t//d3.csv(require('../data/artist_counts.csv'))\n// \t\tkey: ['artist']\n// \t},\n// \t// query: {\n// \t//   // Query Interceptor               | (Optional)\n// \t//   manipulate: query => {\n// \t//     return query.replace('pizza', 'burger')\n// \t//   }\n// \t// },\n// \tsort: (a, b) => {\n// \t\t// Sort rendered results ascendingly | (Optional)\n// \t\tif (a.artist < b.artist) return -1\n// \t\tif (a.artist > b.artist) return 1\n// \t\treturn 0\n// \t},\n// \tplaceHolder: 'Drake', // Place Holder text                 | (Optional)\n// \tselector: '#autoComplete', // Input field selector              | (Optional)\n// \tthreshold: 2, // Min. Chars length to start Engine | (Optional)\n// \tdebounce: 300, // Post duration for engine to start | (Optional)\n// \tsearchEngine: 'strict', // Search Engine type/mode           | (Optional)\n// \t// resultsList: {\n// \t//   // Rendered results list object      | (Optional)\n// \t//   render: true,\n// \t//   container: source => {\n// \t//     const resultsListID = 'food_List'\n// \t//     return resultsListID\n// \t//   },\n// \t//   destination: document.querySelector('#artistSelect'),\n// \t//   position: 'afterend',\n// \t//   element: 'ul'\n// \t// },\n// \tmaxResults: 5, // Max. number of rendered results | (Optional)\n// \thighlight: true, // Highlight matching results      | (Optional)\n// \t// resultItem: {\n// \t//   // Rendered result item            | (Optional)\n// \t//   content: (data, source) => {\n// \t//     source.innerHTML = data.match\n// \t//   },\n// \t//   element: 'li'\n// \t// },\n// \t// noResults: () => {\n// \t//   // Action script on noResults      | (Optional)\n// \t//   const result = document.createElement('li')\n// \t//   result.setAttribute('class', 'no_result')\n// \t//   result.setAttribute('tabindex', '1')\n// \t//   result.innerHTML = 'No Results'\n// \t//   document.querySelector('#autoComplete_results_list').appendChild(result)\n// \t// },\n// \tonSelection: feedback => {\n// \t\t// Action script onSelection event | (Optional)\n// \t\tconsole.log(feedback.selection.value.image_url)\n// \t}\n// })\n"]}